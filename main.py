from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes
)
from telegram.ext import CallbackQueryHandler
from telegram.constants import ParseMode
from telegram import Update
from app.commands_prompt import prompt_history, set_prompt, show_my_prompt
from app.commands_utils import history
from app.weights_commands import reset_weights, set_weights, show_weights
from config import TELEGRAM_API_KEY
from loguru import logger

from app.commands_gpt import analyze_gpt, analyze_all_gpt
from app.commands_gemini import analyze_gem, analyze_all_gem
from app.commands_gpt import feedback_handler as gpt_feedback_handler
from app.commands_gemini import feedback_handler as gem_feedback_handler

logger.add("logs/app.log", format="{time} | {level} | {message}", rotation="10 MB")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –∞–∫—Ü—ñ–π. –û—Å—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        
        "üîç <b>–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –∞–Ω–∞–ª—ñ–∑—É:</b>\n"
        "/analyze_gem TICKER [YYYY-MM-DD] - –ê–Ω–∞–ª—ñ–∑ —Ç–∏–∫–µ—Ä–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Gemini\n"
        "/analyze_gpt TICKER [YYYY-MM-DD] - –ê–Ω–∞–ª—ñ–∑ —Ç–∏–∫–µ—Ä–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é ChatGPT\n"
        "/analyze_all_gem ticker1,ticker2 [YYYY-MM-DD] - –ê–Ω–∞–ª—ñ–∑ –∫—ñ–ª—å–∫–æ—Ö —Ç–∏–∫–µ—Ä—ñ–≤ (Gemini)\n"
        "/analyze_all_gpt ticker1,ticker2 [YYYY-MM-DD] - –ê–Ω–∞–ª—ñ–∑ –∫—ñ–ª—å–∫–æ—Ö —Ç–∏–∫–µ—Ä—ñ–≤ (ChatGPT)\n\n"
        
        "‚öôÔ∏è <b>–ö–µ—Ä—É–≤–∞–Ω–Ω—è –ø—Ä–æ–º–ø—Ç–∞–º–∏ (—ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º–∏ –¥–ª—è –®–Ü):</b>\n"
        "/set_prompt [—Ç–µ–∫—Å—Ç] - –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≤–ª–∞—Å–Ω—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É\n"
        "/myprompt - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Ç–æ—á–Ω—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é\n"
        "/prompthistory - –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –∑–º—ñ–Ω —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π\n"
        
        "‚öñÔ∏è <b>–ö–µ—Ä—É–≤–∞–Ω–Ω—è –≤–∞–≥–∞–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤:</b>\n"
        "/setweights –ø–∞—Ä–∞–º–µ—Ç—Ä1:–∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä2:–∑–Ω–∞—á–µ–Ω–Ω—è - –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≤–ª–∞—Å–Ω—ñ –≤–∞–≥–∏\n"
        "/myweights - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –≤–∞–≥–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤\n"
        
        "‚ÑπÔ∏è <b>–î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏:</b>\n"
        "/help - –î–µ—Ç–∞–ª—å–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n"
        
        "<i>–ü—Ä–∏–º—ñ—Ç–∫–∞: –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω–∏—Ö –¥—É–∂–∫–∞—Ö [] —î –Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º–∏</i>",
        parse_mode=ParseMode.HTML
    )

if __name__ == '__main__':
    app = ApplicationBuilder().token(TELEGRAM_API_KEY).build()

    app.add_handler(CommandHandler("start", help_command))
    app.add_handler(CommandHandler("analyze_gpt", analyze_gpt))
    app.add_handler(CommandHandler("analyze_gem", analyze_gem))
    app.add_handler(CommandHandler("analyze_all_gpt", analyze_all_gpt))
    app.add_handler(CommandHandler("analyze_all_gem", analyze_all_gem))
    
    app.add_handler(CommandHandler("prompthistory", prompt_history))
    app.add_handler(CommandHandler("myprompt", show_my_prompt))
    app.add_handler(CommandHandler("set_prompt", set_prompt))
    
    app.add_handler(CommandHandler("setweights", set_weights))
    app.add_handler(CommandHandler("myweights", show_weights))
    
    app.add_handler(CommandHandler("history", history))
    app.add_handler(CommandHandler("help", help_command))
    
    app.add_handler(CallbackQueryHandler(gpt_feedback_handler, pattern="^feedback"))
    app.add_handler(CallbackQueryHandler(gem_feedback_handler, pattern="^feedback"))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ.")
    app.run_polling()
